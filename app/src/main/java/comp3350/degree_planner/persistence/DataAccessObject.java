package comp3350.degree_planner.persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;

import comp3350.degree_planner.objects.Course;
import comp3350.degree_planner.objects.CourseOffering;
import comp3350.degree_planner.objects.CoursePlan;
import comp3350.degree_planner.objects.CourseResult;
import comp3350.degree_planner.objects.Degree;
import comp3350.degree_planner.objects.Department;
import comp3350.degree_planner.objects.ScienceCourse;
import comp3350.degree_planner.objects.Student;
import comp3350.degree_planner.objects.TermType;
import comp3350.degree_planner.objects.UserDefinedCourse;

import static android.R.attr.description;

/**
 * Created by Tiffany Jiang on 2017-06-24.
 *
 * Comments about the database:
 * - There are a total of 14 tables (for 16 objects)
 * - See Degree_Planner.script (in assets->db) for required info, basically same as what's in Objects
 * - Has been filled with same "default" info as stub, as instructed
 *
 * - All courses are in 1 table: Course table contains some NULLABLE columns corresponding to fields belonging
 * to only ScienceCourse or UserDefinedCourse, and also contains a IsUserDefined boolean
 *
 * - Most of the id's are auto-generated (starts at x, increments for each insert),
 * except for: reference type tables and some tables where some combo of its attributes make up the primary key
 * (again, generally same as what we currently have in the objects - if there's no id field, no id column)
 *
 * - Basically I've found out how the db runs is that when the person runs the app on the device the first time,
 * the db is set up through whatever's in Degree_Planner.script
 * - Then you can only make changes to db through executing updates/queries via DataAccessObject.java,
 * changes to Degree_Planner.script will not be run again
 * - If you want to run changes to Degree_Planner.script, you have to go into the Settings --> Apps in the emulator
 * and 'Clear Data' for Degree Planner which will clear the database so the next time you run it,
 * it starts by running the script again
 *
 * - There is currently only 1 student (id 1), please use that as the student id for now,
 * at least until we get login capabilities set up
 *
 * - Apparently the script doesn't like it when we specify which columns to fill in INSERT e.g.
 * INSERT INTO COURSE_RESULT (COURSE_ID, STUDENT_ID, GRADE_TYPE_ID) VALUES (1, 1, 1)
 * So we have to manually specify every column in the script
 * Then we have to specify in CREATE TABLE for the autogenerated ID to start with
 * 1 + however many is manually inserted in the script (See CREATE TABLE COURSE_RESULT line for example)
 * You can, however, insert however you like via executeUpdate
 */

public class DataAccessObject implements DataAccess {
    private Statement st1, st2, st3;
    private Connection c1;
    private ResultSet rs2, rs3, rs4, rs5;

    private String dbName;
    private String dbType;

    private String cmdString;
    private int updateCount;
    private String result;
    private static String EOF = "  ";

    private ArrayList<Degree> degrees;

    public DataAccessObject(String dbName)
    {
        this.dbName = dbName;
    }

    private final static int hsqlNoParentViolationErrorCode = -177;

    public void open(String dbPath)
    {
        String url;

        try
        {
            dbType = "HSQL";
            Class.forName("org.hsqldb.jdbcDriver").newInstance();
            url = "jdbc:hsqldb:file:" + dbPath;
            c1 = DriverManager.getConnection(url, "SA", "");
            st1 = c1.createStatement();
            st2 = c1.createStatement();
            st3 = c1.createStatement();
        }
        catch (Exception e)
        {
            processSQLError(e);
        }

        try {
            getCoursePlan(1, 1, 1, 2019);
        } catch (SQLException se) {
            se.printStackTrace();
            String temp = se.getSQLState();
            int temp2 = se.getErrorCode();
            String temp3 = se.getMessage();
            String temp4 = se.toString();
            System.out.println (temp + " " + temp2 + temp3 + temp4);
        } catch (Exception e) {
            e.printStackTrace();
        }

//        boolean errorOccurred = false;
//        try {
////            if (courseOffered(1, 1)) {
//                addToCoursePlan(50, 1, 1, 2019);
////            }
//        } catch (SQLIntegrityConstraintViolationException cve) {
//            System.out.println (cve.getCause().toString());
//            errorOccurred = true;
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        if (errorOccurred) {
//            try {
//                if (!isValidCourseId(6)) {
//                    System.out.println ("here");
//                }
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//        }

        System.out.println("Opened " + dbType + " database " + dbPath);
    }

    public void close()
    {
        try
        {	// commit all changes to the database
            cmdString = "shutdown compact";
            rs2 = st1.executeQuery(cmdString);
            c1.close();
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        System.out.println("Closed " + dbType + " database " + dbName);
    }

    public ArrayList<Course> getCoursesNotTaken(int studentNumber) {
        return null;
    }

    public Course getCourse(CourseResult courseResult, ArrayList<Course> allCourses) {
        return null;
    }

    public ArrayList<Course> getAllCourses() {
        return null;
    }

    public ArrayList<Course> getCoursesCanTake(int studentNumber) {
        return null;
    }

    public boolean hasPrerequisites(int studentNumber, String courseName) {
        return false;
    }

    public ArrayList<Course> getAllPrerequisites(Course course) {
        return null;
    }

    public Course findCourse(int courseId) {
        return null;
    }

    public Course findCourse(String courseName) {
        return null;
    }

    public ArrayList<Degree> getAllDegrees() {
        Degree degree;
        int id;
        String name;
        double creditHours, majorCreditHours, gpaRequired;
        degrees = new ArrayList<Degree>();

        result = null;
        try
        {
            cmdString = "Select * from Degree";
            rs2 = st1.executeQuery(cmdString);
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        try
        {
            while (rs2.next())
            {
                id = Integer.parseInt(rs2.getString("ID"));
                name = rs2.getString("NAME");
                creditHours = Double.parseDouble(rs2.getString("CREDIT_HOURS"));
                majorCreditHours = Double.parseDouble(rs2.getString("MAJOR_CREDIT_HOURS"));
                gpaRequired = Double.parseDouble(rs2.getString("GPA_REQUIRED"));
                degree = new Degree(id, name, creditHours, majorCreditHours, gpaRequired);
                degrees.add(degree);
            }
            rs2.close();
        }
        catch (Exception e)
        {
            result = processSQLError(e);
        }

        return degrees;
    }

    public Degree getDegreeByName(String degreeName) {
        return null;
    }

    public Degree getDegreeById(int degreeId) {
        return null;
    }

    public ArrayList<CourseResult> getCourseResultsByStudentId(int studentId) {
        return null;
    }

    public ArrayList<CourseOffering> getAllCourseOfferings() {
        return null;
    }

    public int getFailingGradeId() {
        return -1;
    }

    public Course getCourseById(int courseId) {
        return null;
    }

    public ArrayList<CourseOffering> getCourseOfferingsByTerm(TermType type) {
        return null;
    }

    public Department getDepartmentById(int departmentId) {
        return null;
    }

    public ArrayList<Course> getCoursesTaken(int studentId) {
        return null;
    }

    public ArrayList<Course> getDegreeCoursesTaken(int studentId, int degreeId) {
        return null;
    }

    public ArrayList<Course> getDegreeCourses(int degreeId) {
        return null;
    }

    public ArrayList<Course> getEligibleRequiredCourse(int studentNum, int degreeId) {
        return null;
    }

    public void addToCoursePlan (int courseId, int studentId, int termTypeId, int year) throws Exception {
        String newCoursePlanValues = courseId + ", " + studentId + ", " + termTypeId + ", " + year;
        cmdString = "Insert into Course_Plan (Course_Id, Student_Id, Term_Type_Id, Year) " + " Values (" + newCoursePlanValues + ")";
        updateCount = st1.executeUpdate(cmdString);
    }

    //These next few methods perform checks (as stated respectively) for adding and modify course plans

    public boolean courseOffered (int courseId, int termTypeId) throws Exception {
        boolean validTerm = false;

        //For user-defined courses, let the user freely enter the the term and year
        cmdString = "Select is_user_defined from Course where id = " + courseId;
        rs4 = st2.executeQuery(cmdString);
        while (rs4.next()) {
            validTerm = rs4.getBoolean("is_user_defined");
        }
        rs4.close();

        if (!validTerm) {
            //Is the course historically offered in this term?
            cmdString = "Select count(*) as courseOfferingCount from Course_Offering where course_id = " + courseId + " and term_type_id = " + termTypeId;
            rs4 = st2.executeQuery(cmdString);
            while (rs4.next()) {
                validTerm = (rs4.getInt("courseOfferingCount") > 0);
            }
            rs4.close();
        }

        return validTerm;
    }

    public boolean isValidStudentId (int studentId) throws Exception {
        boolean studentExists = false;

        cmdString = "Select count(*) as studentCount from Student where id = " + studentId;
        rs4 = st2.executeQuery(cmdString);
        while (rs4.next()) {
            studentExists = (rs4.getInt("studentCount") > 0);
        }
        rs4.close();

        return studentExists;
    }

    public boolean isValidCourseId (int courseId) throws Exception {
        boolean courseExists = false;

        cmdString = "Select count(*) as courseCount from Course where id = " + courseId;
        rs4 = st2.executeQuery(cmdString);
        while (rs4.next()) {
            courseExists = (rs4.getInt("courseCount") > 0);
        }
        rs4.close();

        return courseExists;
    }

    public boolean isValidTermTypeId (int termTypeId) throws Exception {
        boolean termTypeExists = false;

        cmdString = "Select count(*) as termTypeCount from Term_Type where id = " + termTypeId;
        rs4 = st2.executeQuery(cmdString);
        while (rs4.next()) {
            termTypeExists = (rs4.getInt("termTypeCount") > 0);
        }
        rs4.close();

        return termTypeExists;
    }

    public boolean coursePlanExists (int courseId, int studentId, int termTypeId, int year) throws Exception {
        boolean coursePlanExists = false;

        cmdString = "Select count(*) as coursePlanCount from Course_Plan where course_id = " + courseId + " and student_id = " + studentId + " and term_type_id = " + termTypeId + " and year = " + year;
        rs4 = st2.executeQuery(cmdString);
        while (rs4.next()) {
            coursePlanExists = (rs4.getInt("coursePlanCount") > 0);
        }
        rs4.close();

        return coursePlanExists;
    }

    public boolean moveCourse (int coursePlanId, int newTermTypeId, int newYear) {
        return false;
    }

    public boolean removeFromCoursePlan (int coursePlanId) {
        return false;
    }

    public CoursePlan getCoursePlan (int courseId, int studentId, int termTypeId, int year) throws Exception {
        CoursePlan cp = null;
        Course course = null;
        Student student = null;
        TermType termType = null;
        Boolean isUserDefinedCourse;
        int coursePlanId = -1;

        cmdString = "SELECT * FROM Course_Plan cp INNER JOIN Course c ON cp.course_id = c.id where cp.course_id = " + courseId + " and cp.student_id = " + studentId + " and cp.term_type_id = " + termTypeId + " and cp.year = " + year;
        rs4 = st2.executeQuery(cmdString);
        while (rs4.next()) {
            isUserDefinedCourse = rs4.getBoolean("is_user_defined");
            if (isUserDefinedCourse) {
                course = new UserDefinedCourse(rs4.getInt("course_id"), rs4.getString("name"), rs4.getDouble("credit_hours"), rs4.getString("full_abbreviation"));
            } else {
                course = new ScienceCourse(rs4.getInt("course_id"), rs4.getString("name"), rs4.getDouble("credit_hours"), rs4.getInt("department_id"), rs4.getInt("course_number"), rs4.getString("description"));
//                String temp = course.getName();
//                String temp2 = ((ScienceCourse)course).getDescription();
//                System.out.println(course.getName());
//                System.out.println(((ScienceCourse)course).getDescription());
            }
        }
        rs4.close();

        if (course != null) { //Course plan found in database
            cmdString = "SELECT * FROM Course_Plan cp INNER JOIN Student s ON cp.student_id = s.id where cp.course_id = " + courseId + " and cp.student_id = " + studentId + " and cp.term_type_id = " + termTypeId + " and cp.year = " + year;
            rs4 = st2.executeQuery(cmdString);
            while (rs4.next()) {
                student = new Student(rs4.getInt("student_id"), rs4.getInt("student_number"), rs4.getString("name"), rs4.getString("email"), rs4.getString("password"), rs4.getInt("degree_id"));
            }
            rs4.close();

            cmdString = "SELECT cp.id as course_plan_id, tt.id, tt.season FROM Course_Plan cp INNER JOIN Term_Type tt ON cp.term_type_id = tt.id where cp.course_id = " + courseId + " and cp.student_id = " + studentId + " and cp.term_type_id = " + termTypeId + " and cp.year = " + year;
            rs4 = st2.executeQuery(cmdString);
            while (rs4.next()) {
                termType = new TermType(rs4.getInt("term_type_id"), rs4.getString("season"));
                coursePlanId = rs4.getInt("course_plan_id");
            }
            rs4.close();

            cp = new CoursePlan(coursePlanId, course, student, termType, year);
        } else { //Course Plan was not found in database
            cp = null;
        }

        return cp;
    }

    private String processSQLError(Exception e)
    {
        String result = "*** SQL Error: " + e.getMessage();

        // Remember, this will NOT be seen by the user!
        e.printStackTrace();

        return result;
    }
}
