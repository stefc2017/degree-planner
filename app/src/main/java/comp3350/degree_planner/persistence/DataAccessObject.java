package comp3350.degree_planner.persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import comp3350.degree_planner.objects.Course;
import comp3350.degree_planner.objects.CourseOffering;
import comp3350.degree_planner.objects.CoursePlan;
import comp3350.degree_planner.objects.CoursePrerequisite;
import comp3350.degree_planner.objects.CourseResult;
import comp3350.degree_planner.objects.Degree;
import comp3350.degree_planner.objects.Department;
import comp3350.degree_planner.objects.ScienceCourse;
import comp3350.degree_planner.objects.TermType;

/**
 * Created by Tiffany Jiang on 2017-06-24.
 *
 * Comments about the database:
 * - There are a total of 14 tables (for 16 objects)
 * - See Degree_Planner.script (in assets->db) for required info, basically same as what's in Objects
 * - Has been filled with same "default" info as stub, as instructed
 *
 * - All courses are in 1 table: Course table contains some NULLABLE columns corresponding to fields belonging
 * to only ScienceCourse or UserDefinedCourse, and also contains a IsUserDefined boolean
 *
 * - Most of the id's are auto-generated (starts at x, increments for each insert),
 * except for: reference type tables and some tables where some combo of its attributes make up the primary key
 * (again, generally same as what we currently have in the objects - if there's no id field, no id column)
 *
 * - Basically I've found out how the db runs is that when the person runs the app on the device the first time,
 * the db is set up through whatever's in Degree_Planner.script
 * - Then you can only make changes to db through executing updates/queries via DataAccessObject.java,
 * changes to Degree_Planner.script will not be run again
 * - If you want to run changes to Degree_Planner.script, you have to go into the Settings --> Apps in the emulator
 * and 'Clear Data' for Degree Planner which will clear the database so the next time you run it,
 * it starts by running the script again
 *
 * - There is currently only 1 student (id 1), please use that as the student id for now,
 * at least until we get login capabilities set up
 *
 * - Apparently the script doesn't like it when we specify which columns to fill in INSERT e.g.
 * INSERT INTO COURSE_RESULT (COURSE_ID, STUDENT_ID, GRADE_TYPE_ID) VALUES (1, 1, 1)
 * So we have to manually specify every column in the script
 * Then we have to specify in CREATE TABLE for the autogenerated ID to start with
 * 1 + however many is manually inserted in the script (See CREATE TABLE COURSE_RESULT line for example)
 * You can, however, insert however you like via executeUpdate
 */

public class DataAccessObject implements DataAccess {
    private Statement st1, st2, st3;
    private Connection c1;
    private ResultSet rs2, rs3, rs4, rs5;

    private String dbName;
    private String dbType;

    private String cmdString;
    private int updateCount;
    private String result;
    private static String EOF = "  ";

    private List<Degree> degrees;
    private List<Course> courses;
    private List<CoursePrerequisite> coursePrerequisites;
    private List<CourseOffering> courseOfferings;

    public DataAccessObject(String dbName)
    {
        this.dbName = dbName;
    }

    public void open(String dbPath)
    {
        String url;

        try
        {
            dbType = "HSQL";
            Class.forName("org.hsqldb.jdbcDriver").newInstance();
            url = "jdbc:hsqldb:file:" + dbPath;
            c1 = DriverManager.getConnection(url, "SA", "");
            st1 = c1.createStatement();
            st2 = c1.createStatement();
            st3 = c1.createStatement();
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        System.out.println("Opened " + dbType + " database " + dbPath);
    }

    public void close()
    {
        try
        {	// commit all changes to the database
            cmdString = "shutdown compact";
            rs2 = st1.executeQuery(cmdString);
            c1.close();
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        System.out.println("Closed " + dbType + " database " + dbName);
    }

    public List<Course> getCoursesNotTaken(int studentNumber) {
        return null;
    }

    public Course getCourse(CourseResult courseResult, ArrayList<Course> allCourses) {
        return null;
    }
    //By F.D.
    //This one gets ScienceCourses, so it might need to be changed...
    public List<Course> getAllCourses() {
        ScienceCourse course;
        int id, courseNumber, departmentId;
        String name, description;
        double creditHours;
        courses = new ArrayList<Course>();

        result = null;
        try
        {
            cmdString = "Select * from Course";
            rs2 = st1.executeQuery(cmdString);
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        try
        {
            while (rs2.next())
            {
                id = Integer.parseInt(rs2.getString("ID"));
                name = rs2.getString("NAME");
                creditHours = Double.parseDouble(rs2.getString("CREDIT_HOURS"));
                courseNumber = Integer.parseInt(rs2.getString("COURSE_NUMBER"));
                departmentId = Integer.parseInt(rs2.getString("DEPARTMENT_ID"));
                description = rs2.getString("DESCRIPTION");
                course = new ScienceCourse(id, name, creditHours, departmentId, courseNumber, description);
                courses.add(course);
            }
            rs2.close();
        }
        catch (Exception e)
        {
            result = processSQLError(e);
        }

        return courses;
    }

    public List<Course> getCoursesCanTake(int studentNumber) {
        return null;
    }

    public boolean hasPrerequisites(int studentNumber, String courseName) {
        return false;
    }
    //By F.D.
    //Again, not sure how to get all course info
    public List<Course> getAllPrerequisites(Course course) {
        //ScienceCourse course;
        Course prereqCourse;
        CoursePrerequisite coursePrerequisite;
        int courseID, prereqCourseID;
        coursePrerequisites = new ArrayList<CoursePrerequisite>();

        result = null;
        try
        {
            cmdString = "Select * from CoursePrerequisite";
            rs2 = st1.executeQuery(cmdString);
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        try
        {
            while (rs2.next())
            {
                courseID = Integer.parseInt(rs2.getString("COURSE_ID"));
                prereqCourseID = Integer.parseInt(rs2.getString("PREREQ_COURSE_ID"));
                prereqCourse = new ScienceCourse(prereqCourseID, "temp", 3.0, 1, 3333, "temp");//Again, not sure how to get course for now
                coursePrerequisite=new CoursePrerequisite(course,prereqCourse);
                coursePrerequisites.add(coursePrerequisite);
            }
            rs2.close();
        }
        catch (Exception e)
        {
            result = processSQLError(e);
        }

        List<Course> prerequisites = new ArrayList<Course>();
        int numberOfCoursePrereqs = coursePrerequisites.size(); //the number of prerequisites
        int courseId = course.getId(); //the course number of the course object
        Course currentCourse; //to keep track of the current course

        for (int i = 0; i < numberOfCoursePrereqs; i++) {
            if ((coursePrerequisites.get(i)).getCourse().getId() == courseId) { //if this is a prerequisite for the course
                currentCourse = findCourse((coursePrerequisites.get(i)).getPrereqCourse().getId()); //get the course
                prerequisites.add(currentCourse); //add the course to the list of prerequisites
            }//end if
        }//end for

        return prerequisites;
    }

    public Course findCourse(int courseId) {
        return null;
    }

    public Course findCourse(String courseName) {
        return null;
    }

    public List<Degree> getAllDegrees() {
        Degree degree;
        int id;
        String name;
        double creditHours, majorCreditHours, gpaRequired;
        degrees = new ArrayList<Degree>();

        result = null;
        try
        {
            cmdString = "Select * from Degree";
            rs2 = st1.executeQuery(cmdString);
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        try
        {
            while (rs2.next())
            {
                id = Integer.parseInt(rs2.getString("ID"));
                name = rs2.getString("NAME");
                creditHours = Double.parseDouble(rs2.getString("CREDIT_HOURS"));
                majorCreditHours = Double.parseDouble(rs2.getString("MAJOR_CREDIT_HOURS"));
                gpaRequired = Double.parseDouble(rs2.getString("GPA_REQUIRED"));
                degree = new Degree(id, name, creditHours, majorCreditHours, gpaRequired);
                degrees.add(degree);
            }
            rs2.close();
        }
        catch (Exception e)
        {
            result = processSQLError(e);
        }

        return degrees;
    }

    public Degree getDegreeByName(String degreeName) {
        return null;
    }

    public Degree getDegreeById(int degreeId) {
        return null;
    }

    public List<CourseResult> getCourseResultsByStudentId(int studentId) {
        return null;
    }
    //By F.D.
    //I'm not exactly sure how to get course and term info other than ID, so filled them with temps for now
    public List<CourseOffering> getAllCourseOfferings() {
        CourseOffering courseOffering;
        Course course;
        TermType termType;
        int courseID;
        int termTypeID;
        courseOfferings=new ArrayList<CourseOffering>();


        result = null;
        try
        {
            cmdString = "Select * from CourseOffering";
            rs2 = st1.executeQuery(cmdString);
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        try
        {
            while (rs2.next())
            {
                //Temps for now because I'm not sure how to get other course and termtype info
                courseID=Integer.parseInt(rs2.getString("COURSE_ID"));
                termTypeID=Integer.parseInt(rs2.getString("TERM_TYPE_ID"));
                course=new ScienceCourse(courseID,"Temp",3.0,1,1,"test");
                termType=new TermType(termTypeID, "Winter");
                courseOffering=new CourseOffering(course,termType);
                courseOfferings.add(courseOffering);
            }
            rs2.close();
        }
        catch (Exception e)
        {
            result = processSQLError(e);
        }

        return courseOfferings;
    }

    public int getFailingGradeId() {
        return -1;
    }

    public Course getCourseById(int courseId) {
        return null;
    }
    //By F.D.
    //Seems like no changes needed on this one..
    public List<CourseOffering> getCourseOfferingsByTerm(TermType term) {
        List<CourseOffering> courseOfferingsByTermList = new ArrayList<>();
        if(term != null) {
            for (int i = 0; i < courseOfferings.size(); i++) {
                try {
                    if (term.getId() == 1 || term.getId() == 2 || term.getId() == 3) {
                        if (term.getId() == (courseOfferings.get(i)).getTermType().getId()) {
                            //Adds course offering based on courseID from CourseOfferings and matching TermID
                            courseOfferingsByTermList.add(courseOfferings.get(i));
                        }
                    }
                } catch (IllegalArgumentException e) {
                }
            }
        }

        return courseOfferingsByTermList;
    }

    public Department getDepartmentById(int departmentId) {
        return null;
    }

    public List<Course> getCoursesTaken(int studentId) {
        return null;
    }

    public List<Course> getDegreeCoursesTaken(int studentId, int degreeId) {
        return null;
    }

    public List<Course> getDegreeCourses(int degreeId) {
        return null;
    }

    public List<Course> getEligibleRequiredCourse(int studentNum, int degreeId) {
        return null;
    }

    public int addToCoursePlan (int courseId, int studentId, int termTypeId, int year) {
        return -1;
    }

    public boolean moveCourse (int coursePlanId, int newTermTypeId, int newYear) {
        return false;
    }

    public boolean removeFromCoursePlan (int coursePlanId) {
        return false;
    }

    public CoursePlan getCoursePlanById (int coursePlanId) {
        return null;
    }

    public Course getCourse(CourseResult courseResult, List<Course> allCourses){ return null; }

    public String processSQLError(Exception e)
    {
        String result = "*** SQL Error: " + e.getMessage();

        // Remember, this will NOT be seen by the user!
        e.printStackTrace();

        return result;
    }
}
